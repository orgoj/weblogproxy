[settings]
jobs=1

[tools]
github-cli = "latest"
go = "latest"
golangci-lint = "latest"
hurl = "latest"
jq = "latest"
shellcheck = "latest"
shfmt = "latest"

[env]
GO111MODULE = "on"
CGO_ENABLED = "0"

[tasks.deps]
description = "Download and tidy Go dependencies"
run = "go mod tidy"
sources = ["go.*"]
outputs = { auto = true }

[tasks.format]
description = "Format all Go code recursively"
sources = ["Dockerfile", "cmd/**/*", "internal/**/*"]
outputs = { auto = true }
run = "gofmt -w ."

[tasks.lint]
description = "Run Go linters"
run = "golangci-lint run"
sources = ["Dockerfile", "cmd/**/*", "internal/**/*"]
outputs = { auto = true }
depends = ["format"]

[tasks.build]
description = "Build the weblogproxy binary executable"
run = "go build -o weblogproxy ./cmd/weblogproxy"
depends = ["deps", "format", "lint", "security-check"]
sources = ["go.*", "cmd/**/*", "internal/**/*"]
outputs = "weblogproxy"

[tasks.config-check]
description = "Validate application configuration file"
run = "go run ./cmd/weblogproxy --test --config config/test.yaml"
sources = ["go.*", "cmd/**/*.go", "internal/**/*.go"]
outputs = { auto = true }

[tasks.run]
description = "Run weblogproxy with example configuration"
run = "go run ./cmd/weblogproxy --config config/example.yaml"
depends = ["config-check", "deps"]

[tasks.run-test]
description = "Run weblogproxy with test configuration"
run = "go run ./cmd/weblogproxy --config config/test.yaml"
depends = ["config-check", "deps"]

[tasks.test-unit]
description = "Run unit tests only"
run = "go test -v ./..."
sources = ["Dockerfile", "cmd/**/*", "internal/**/*"]
outputs = { auto = true }

[tasks.test-e2e]
description = "Run end-to-end tests only"
run = "./test/run.sh"
sources = ["Dockerfile", "cmd/**/*", "internal/**/*"]
outputs = { auto = true }
depends = ["build"]

[tasks.test]
description = "Run all tests"
wait_for = ["build", "config-check"]
depends = ["test-unit", "test-e2e"]

[tasks.docker-build]
description = "Build the Docker image"
run = "./scripts/docker-build.sh"
sources = ["Dockerfile", "cmd/**/*", "internal/**/*"]
outputs = { auto = true }
depends = ["ci"]

[tasks.docker-run]
description = "Run the Docker container"
run = "docker run -p 8080:8080 -v $(pwd)/config/example.yaml:/app/config/config.yaml weblogproxy:latest"
depends = ["docker-build"]

[tasks.docker-test]
description = "Test Docker image and functionality"
run = "./scripts/docker-test.sh"
sources = ["Dockerfile", "cmd/**/*", "internal/**/*"]
outputs = { auto = true }
depends = ["docker-build"]

[tasks.docker-ssh-copy]
description = "Deploy Docker image to remote server via SSH"
run = "./scripts/docker-ssh-copy.sh"
depends = ["docker-test"]

[tasks.version-bump-dev]
description = "Set version to -dev and prepare [Unreleased] changelog section"
run = "./scripts/bump-version-dev.sh"

[tasks.version-bump-release]
description = "Bump version for release and update changelog"
run = "./scripts/bump-version-release.sh"

[tasks.publish]
description = "Publish a new version"
run = "./scripts/publish.sh"
depends = ["test", "docker-test"]

[tasks.install-sec-tools]
description = "Install or update security tools (gosec, govulncheck)"
run = "go install github.com/securego/gosec/v2/cmd/gosec@latest && go install golang.org/x/vuln/cmd/govulncheck@latest"

[tasks.gosec]
description = "Run gosec security scan"
run = "gosec ./..."
sources = ["Dockerfile", "cmd/**/*", "internal/**/*"]
outputs = { auto = true }

[tasks.govulncheck]
description = "Run govulncheck vulnerability scan"
run = "govulncheck ./..."
sources = ["Dockerfile", "cmd/**/*", "internal/**/*"]
outputs = { auto = true }

[tasks.security-check]
description = "Run all security checks"
depends = ["gosec", "govulncheck"]

[tasks.ci]
description = "Run all CI checks (lint, test, security)"
# Assuming CI should run security checks as well
depends = ["lint", "test", "security-check"]
